#!/usr/bin/env python
#
# Sends a command of a serial port and prints the response 
#
# This version has been adapted for instable rfcoomm serial
# connection on Victron Venus OS
#
# This source file is part of the follwoing repository:
# http://www.github.com/microfarad-de/nastia-server
#
# Please visit:
#   http://www.microfarad.de
#   http://www.github.com/microfarad-de
#
# Copyright (C) 2023 Karim Hraibi (khraibi@gmail.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import serial  # pip install pyserial
import ilock   # pip install ilock
import sys
import time


# Read the contents of the receive buffer
def read():
    global device
    global ser
    global success
    rx = " "
    result = ""
    while len(rx) > 0:
        try:
            rx = ser.readline().decode()
            result = result + rx
            time.sleep(0.1)
            success = True
        except:
            #print(f"Failed to read from {device}")
            success = False
            break
    return result


# Write to the transmit buffer
def write(str):
    global device
    global ser
    global success
    try:
        ser.write(str.encode())
        success = True
    except:
        #print(f"Failed to write to {device}")
        success = False


# Extends ILock with exception handling
class ILockE(ilock.ILock):
    def __enter__(self):
        while 1:
            try:
                super(ILockE, self).__enter__()
                break
            except PermissionError:
                pass
    def __exit__(self, exc_type, exc_val, exc_tb):
        while 1:
            try:
                super(ILockE, self).__exit__(exc_type, exc_val, exc_tb)
                break
            except PermissionError:
                pass
            except FileNotFoundError:
                break


#################
####  START  ####
#################
if __name__ == '__main__':


    # Check for correct number of arguments
    if len(sys.argv) != 4:
        print(f"Usage: {sys.argv[0]} <device> <baud rate> <command>")
        sys.exit(1)

    device    = sys.argv[1]
    baud_rate = sys.argv[2]
    command   = sys.argv[3]

    # System-wide lock ensures mutually exclusive access to the serial port
    lock = ILockE(device, timeout=600)

    rx = ""

    if command:
        retry   = 10
        success = False
        while not success and retry > 0:
            with lock:
                with serial.Serial(device, baud_rate, timeout=0.5) as ser:
                    time.sleep(1)
                    write(command + "\r\n")
                    #print("Write")
                    count = 10
                    while not rx and count > 0:
                        if not success:
                            break
                        time.sleep(1)
                        rx = read()
                        #print(f"Read {count}")
                        count -= 1
                    retry -= 1

    print(rx)

