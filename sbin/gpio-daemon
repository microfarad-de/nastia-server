#!/bin/bash
#
# Daemon script, enables GPIO acces to non root users
#
# The gpio command is written into the file /tmp/gpio
# with the following format: <pin> <value>
#
# Example: echo "26 1" > /tmp/gpio
#
# This source file is part of the follwoing repository:
# http://www.github.com/microfarad-de/nastia-server
#
# Please visit:
#   http://www.microfarad.de
#   http://www.github.com/microfarad-de
#
# Copyright (C) 2025 Karim Hraibi (khraibi@gmail.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Current directory where this script is located
DIR=$(dirname $(readlink -f "$BASH_SOURCE"))

# Include common configuration file
source "$DIR/common.sh"


# Configuration parameters
LOG="$CFG_LOG_DIR/gpio-daemon.log"  # Main log file
PREFIX="gpio-daemon"                # Log prefix
OUT_FILE="/tmp/gpio-out"            # GPIO control file
STATUS_DIR="/tmp/gpio"              # GPIO status diretory


# Print info message to log file
function infoLog {
  _infoLog "$1" "$PREFIX" "$LOG" "ecd"
}

# Print warning message to log file
function warningLog {
  _warningLog "$1" "$PREFIX" "$LOG" "ecd"
}

# Print error message to log file
function errorLog {
  _errorLog "$1" "$PREFIX" "$LOG" "ecd"
}



#################
####  START  ####
#################

infoLog "GPIO daemon started."

mkdir -p "$STATUS_DIR"

# Initialize perconfigured GPIO pins
for i in "${!CFG_GPIO[@]}"; do
  config=(${CFG_GPIO[i]})
  pin="${config[0]}"
  direction="${config[1]}"

  # Initialize pin
  if [[ ! -e "/sys/class/gpio/gpio$pin" ]]; then
    echo "$pin" > "/sys/class/gpio/export"
    rv=$?
    if [[ $rv -ne 0 ]]; then
      errorLog "failed to initialize GPIO pin $pin (exit code $rv)"
    else
      infoLog "initialized GPIO pin $pin"
    fi
  else
    infoLog "GPIO pin $pin already initialized"
  fi

  curDirection=$(cat "/sys/class/gpio/gpio$pin/direction")

  # Set the pin direction
  if [[ "$curDirection" != "$direction" ]]; then
    echo "$direction" > "/sys/class/gpio/gpio$pin/direction"
    rv=$?
    if [[ $rv -ne 0 ]]; then
      errorLog "failed to set GPIO pin $pin direction (exit code $rv)"
    else
      infoLog "GPIO pin $pin direction set to 'out'"
    fi
  else
    infoLog "GPIO pin $pin direction already set to '$direction'"
  fi

done



init_gpio() {
  pin=$1
  if [ ! -d "/sys/class/gpio/gpio${pin}" ]; then
    echo "$pin" > "/sys/class/gpio/export"
    sleep 0.1
  fi

  # Set direction to out if not already
  dir=$(cat "/sys/class/gpio/gpio${pin}/direction")
  if [ "$dir" != "out" ]; then
    echo "out" > "/sys/class/gpio/gpio${pin}/direction"
  fi
}

set_gpio_value() {
  pin=$1
  val=$2
  echo "$val" > "/sys/class/gpio/gpio${pin}/value"
  infoLog "Set GPIO $pin to $val"
}


while true; do

  # Write to GPIO
  if [ -f "$OUT_FILE" ]; then
    while read -r pin val; do
      # Validate inputs
      if echo "$pin" | grep -Eq '^[0-9]+$' && { [ "$val" = "0" ] || [ "$val" = "1" ]; }; then
        init_gpio "$pin"
        set_gpio_value "$pin" "$val"
      else
        errorLog "Invalid format: '$pin $val'"
      fi
    done < "$OUT_FILE"

    rm -f "$OUT_FILE"
  fi

  # Collect GPIO status
  for i in "${!CFG_GPIO[@]}"; do
    config=(${CFG_GPIO[i]})
    pin="${config[0]}"
    cat "/sys/class/gpio/gpio${pin}/value" > "$STATUS_DIR/${pin}"
  done

  sleep 1
done

