#!/bin/bash
#
# Backup SD card image to external HDD
# Must run as root
#
# This source file is part of the follwoing repository:
# http://www.github.com/microfarad-de/nastia-server
#
# Please visit:
#   http://www.microfarad.de
#   http://www.github.com/microfarad-de
#
# Copyright (C) 2019 Karim Hraibi (khraibi@gmail.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# Path to the current directory where this script is located
DIR=$(dirname $(readlink -f "$BASH_SOURCE"))

# Include common configuration file
source "$DIR/common.sh"


# Configuration parameters
OUTDIR="$CFG_BACKUP_SD_DESTINATION"
DEVICE="$CFG_BACKUP_SD_DEVICE"
LOCK="$CFG_TMPFS_DIR/backup-sd.lock"
LOG="$CFG_LOG_DIR/backup-sd.log"


function infoLog {
  _infoLog "$1" "backup-sd" "$LOG" "ecd"
}

function warningLog {
  _warningLog "$1" "backup-sd" "$LOG" "ecd"
}

function errorLog {
  _errorLog "$1" "backup-sd" "$LOG" "ecd"
  semaphoreRelease "$LOCK"
  exit 1
}


################
#### START  ####
################

# avoid multiple instances of this script
semaphoreLock "$LOCK"
if [[ $? -ne 0 ]]; then
  warningLog "an instance of the current script is already running (please remove $LOCK)"
  exit 1
fi


# Recreate output directory
rm -rf "$OUTDIR"
rv=$?
if [[ $rv -ne 0 ]]; then
  errorLog "failed to remove $OUTDIR (exit code $rv)"
fi

mkdir -p "$OUTDIR"
rv=$?
if [[ $rv -ne 0 ]]; then
  errorLog "failed to create $OUTDIR (exit code $rv)"
fi

cd "$OUTDIR"
rv=$?
if [[ $rv -ne 0 ]]; then
  errorLog "failed to open $OUTDIR (exit code $rv)"
fi

# Read disk image and split into chunks
dd if="$DEVICE" | split -b 1000m - chunk_
rv=${PIPESTATUS[0]}
if [[ $rv -eq 0 ]]; then
  infoLog "$DEVICE backed-up to $OUTDIR"
else
  errorLog "failed to back-up $DEVICE (exit code $rv)"
fi

for path in "${CFG_BACKUP_SD_AUX_DIR[@]}"; do
  install -d "$OUTDIR/$path"
  rsync -avmu --delete "$path/" "$OUTDIR/$path/"
  rv=$?
  if [[ $rv -eq 0 ]]; then
    infoLog "$path backed-up to $OUTDIR"
  else
    errorLog "failed to backup $path (exit code $rv)"
  fi
done

# Set output ownership and permissions
chown -R "$CFG_USER":"$CFG_GROUP" "$OUTDIR/chunk_"*
find "$OUTDIR" -type d -exec chmod "$CFG_DMODE" {} +
find "$OUTDIR" -type f -exec chmod "$CFG_FMODE" {} +

semaphoreRelease "$LOCK"
exit 0
