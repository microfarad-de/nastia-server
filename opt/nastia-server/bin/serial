#!/usr/bin/env python
#
# RS232 Serial Port Console
#
# This source file is part of the follwoing repository:
# http://www.github.com/microfarad-de/nastia-server
#
# Please visit:
#   http://www.microfarad.de
#   http://www.github.com/microfarad-de
#
# Copyright (C) 2019 Karim Hraibi (khraibi@gmail.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import serial    # pip install pyserial
import sys
import time
import os

# Current directory where this script is located
DIR = os.path.dirname(os.path.abspath(__file__))

# Directory path of the common libraries
LIB_DIR = DIR + "/../lib"


# Semaphore identifier, must be the same for all scripts
# accessing the same serial port
SEMAPHORE = "ups"


# Lock the semaphore
def semaphoreLock():
    os.popen(LIB_DIR + "/semaphoreLock.sh " + SEMAPHORE + " b")


# Release the semaphore
def semaphoreRelease():
    os.popen(LIB_DIR + "/semaphoreRelease.sh " + SEMAPHORE)



# Read the contents of the receive buffer
def read():
    rx = " "
    result = ""
    while len(rx) > 0:
        rx = ser.readline()
        result = result + rx
    time.sleep(0.1)
    return result

# Write to the transmit buffer
def write(str):
    ser.write(str)
    time.sleep(0.1)



#################
####  START  ####
#################

# Check for correct number of arguments
if len(sys.argv) < 2:
    print "usage: " + sys.argv[0] + " DEVICE BAUD_RATE"
    sys.exit()

DEVICE    = sys.argv[1]    # RS232 device name
BAUD_RATE = sys.argv[2]    # Serial baud rate


# Initialize the serial port
ser = serial.Serial(DEVICE, BAUD_RATE, timeout=0.1)


# A serial connection will cause the MCU to reboot
# The following will flush the initial boot message
# and wait until the MCU is up and running
time.sleep(2)
semaphoreLock()
rx = read()
semaphoreRelease()
sys.stdout.write(rx)


while 1:
    tx = sys.stdin.readline()
    semaphoreLock()
    write(tx)
    rx = read()
    semaphoreRelease()
    sys.stdout.write(rx)



