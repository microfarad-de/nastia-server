#!/bin/bash
#
# Monitor the server status and send email notification upon errors
# Depends on:
# - speedtest-cli
# - lynx
#
# This source file is part of the follwoing repository:
# http://www.github.com/microfarad-de/nastia-server
#
# Please visit:
#   http://www.microfarad.de
#   http://www.github.com/microfarad-de
#
# Copyright (C) 2019 Karim Hraibi (khraibi@gmail.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


# Current directory where this script is located
DIR=$(dirname $(readlink -f "$BASH_SOURCE"))

# Include the common configuration file
# Provides the paths for the temporary log files
source "$DIR/common.sh"


# Configuration parameters:
RECIPIENT="$CFG_EMAIL"                              # Email address where the report is to be sent
SUBJECT="$CFG_EMAIL_SUBJECT_PREFIX"                 # Prefix for the email subject
FORMAT="$CFG_EMAIL_FORMAT"                          # Email message format
DOMAIN_NAME="$CFG_DOMAIN_NAME"                      # IPv4 domain name for the ping test
DOMAIN_NAME_V6="$CFG_DOMAIN_NAME"                   # IPv6 domain name for the ping test
DNS="$CFG_MONITOR_DNS"                              # DNS resolver address 
DISK_SPACE_THRESHOLD="$CFG_MONITOR_DISK_THRESHOLD"  # Threshold in percent of free disk space to trigger a disk warning
DISK_SPACE_DISKS=("${CFG_MONITOR_DISK[@]}")         # List of disk mount points to be monitored
SPEED_TEST_RUNS="$CFG_MONITOR_SPEED_RUNS"           # Number of internet speed test runs to be executed
SPEED_TEST_PING_THRESHOLD="$CFG_MONITOR_SPEED_PING_THRESHOLD"  # Maximum acceptable ping duration in ms
SPEED_TEST_DL_THRESHOLD="$CFG_MONITOR_SPEED_DL_THRESHOLD"      # Minimum acceptable downlink internet connection speed in Mbps
SPEED_TEST_UL_THRESHOLD="$CFG_MONITOR_SPEED_UL_THRESHOLD"      # Minimum acceptable uplink internet connection speed in Mbps
SERVICES=("${CFG_MONITOR_SERVICE[@]}")              # List of services to be checked


# List of available testcases
TESTCASES=(
  "system-status"
  "disk-space"
  "speed-test"
  "cron-check"
  "script-errors"
  "script-warnings"
  "script-info"
  "dns"
  "ping-v4"
  "ping-v6"
  "service-status"
)



# Global variables:
LOG="$CFG_LOG_DIR/monitor.log"        # Main log file
LOCK="$CFG_TMPFS_DIR/monitor.lock"      # Lock file, avoids running multiple instances of this script
MAIL_BODY=""
WARNING_FLAG=0
ERROR_FLAG=0
SCRIPT_ERRORS=0
SCRIPT_WARNINGS=0
SCRIPT_INFO=0

# Log a info, writes to log file only
function infoLog {
  _infoLog "$1" "" "$LOG" "ed+"
}

# Log a info, writes to email report only
function mailLog {
  MAIL_BODY="${MAIL_BODY}$1"$'\n'
}

# Log an OK message, writes to email report only
function okLog {
  _infoLog "$1" "" "$LOG" "e+"
  if [[ "$2" == "inline" ]]; then
    MAIL_BODY="${MAIL_BODY}<font class='ok'>[OK]</font>"$'\n'
  else
    MAIL_BODY="${MAIL_BODY}<p><font class='ok'>[OK]</font> $1</p>"$'\n'
  fi
}

# Log a warning, writes to both email report and log file
function warningLog {
  _warningLog "$1" "" "$LOG" "ed+"
  if [[ "$2" == "inline" ]]; then
    MAIL_BODY="${MAIL_BODY}<font class='warning'>[WARNING]</font>"$'\n'
  else
    MAIL_BODY="${MAIL_BODY}<p><font class='warning'>[WARNING]</font> $1</p>"$'\n'
  fi
  WARNING_FLAG=1
}

# Log an error, writes to both email report and log file
function errorLog {
  _errorLog "$1" "" "$LOG" "ed+"
  if [[ "$2" == "inline" ]]; then
    MAIL_BODY="${MAIL_BODY}<font class='error'>[ERROR]</font>"$'\n'
  else
    MAIL_BODY="${MAIL_BODY}<p><font class='error'>[ERROR]</font> $1</p>"$'\n'
  fi
  ERROR_FLAG=1
}


# Construct an email message
function constructMail {
  status="$1"
  echo "to: $RECIPIENT"
  echo "cc:"
  echo "bcc:"
  echo "Subject: $SUBJECT $status ($(date))"
  echo "MIME-Version: 1.0"
  if [[ "$FORMAT" == "html" ]]; then
    echo "Content-Type: multipart/alternative; boundary=Next_Part_qwwertzuiopasdfghjklyxcvbnm"
    echo "--Next_Part_qwwertzuiopasdfghjklyxcvbnm"
    echo "Content-Type: text/plain; charset=utf-8"
    echo ""
    echo "$MAIL_BODY" | lynx -stdin -dump -width=300
    echo ""
    echo "--Next_Part_qwwertzuiopasdfghjklyxcvbnm"
    echo "Content-Type: text/html; charset=utf-8"
    echo ""
    echo "$MAIL_BODY"
    echo "--Next_Part_qwwertzuiopasdfghjklyxcvbnm--"
    echo ""
  elif [[ "$FORMAT" == "preformat" ]]; then
    echo "Content-Type: text/html; charset=utf-8"
    echo ""
    echo "<pre>"
    echo "$MAIL_BODY" | lynx -stdin -dump -width=300
    echo "</pre>"
    echo ""
  else
    echo "Content-Type: text/plain; charset=utf-8"
    echo ""
    echo "$MAIL_BODY" | lynx -stdin -dump -width=300
    echo ""
  fi
}


# Send an email message
function sendMail {
  local status="$1"
  constructMail "$status" | /usr/bin/msmtp -a default "$RECIPIENT"
  local rv=${PIPESTATUS[1]}
  if [[ $rv -ne 0 ]]; then
    errorLog "'mail' returned $rv while sending to $RECIPIENT"
    return 1
  else
    infoLog "Email sent to: $RECIPIENT"
    return 0
  fi
}



# Executes a testcase, prevents executing arbitrary commands
function execute {
  testcase="$1"
  if [[ "$testcase" == "" ]]; then
    return 0
  fi
  local t
  for t in "${TESTCASES[@]}"; do
    if [[ "$testcase" == "$t" ]]; then
      $testcase
      return $?
    fi
  done
  errorLog "Invalid test $testcase"
  echo "Available tests:"
  for command in "${TESTCASES[@]}"; do
    echo "  $command"
  done
  return 1
}



#####################
####  TESTCASES  ####
#####################


# System statistics
function system-status {
  tmp="$CFG_TMPFS_DIR/monitor-system-status.tmp"
  echo "*** System Status ***"
  mailLog "<h2>System Status</h2>"
  if [[ ! -f "$tmp" ]]; then
    echo "Uptime:      $(/usr/bin/uptime -p)" > "$tmp"
    echo "System time: $(/usr/bin/date)"     >> "$tmp"
    warningLog "The system has been rebooted"
  fi
  mailLog "<table>"
  echo "Uptime: $(/usr/bin/uptime -p)"
  mailLog "<tr><th class='padded'>Uptime:</th><td class='padded'>$(/usr/bin/uptime -p)</td></tr>"
  echo "System time: $(date)"
  mailLog "<tr><th class='padded'>System time:</th><td class='padded'>$(date)</td></tr>"
  echo "Load average: $(cat /proc/loadavg)"
  mailLog "<tr><th class='padded'>Load average:</th><td class='padded'>$(cat /proc/loadavg)</td></tr>"
  echo "CPU temp.: $(vcgencmd measure_temp | cut -c6-)"
  mailLog "<tr><th>CPU temp.:</th><td>$(vcgencmd measure_temp | cut -c6-)</td></tr>"
  mailLog "</table>"
  mailLog "<p>&nbsp;</p>"
  echo ""
  echo ""
}


# Check remaining disk space
function disk-space {
  local disk freeSpace totalSpace rv freePercent
  echo "*** Disk Space ***"
  mailLog "<h2>Disk Space</h2>"
  mailLog "<table>"
  mailLog "<tr><th>Disk</th><th>Size</th><th>Avail</th><th>Avail%</th><th>Status</th></tr>"
  for disk in "${DISK_SPACE_DISKS[@]}"; do
    mailLog "<tr>"
    mailLog "<td>$disk</td>"
    if mount | grep "$disk" > /dev/null; then
      freeSpace=$(df --block-size=1G  "$disk" | tail -1 | awk '{print $4}')
      totalSpace=$(df --block-size=1G  "$disk" | tail -1 | awk '{print $2}')
      rv=$?
      freePercent=$(( freeSpace * 100 / totalSpace ))
      mailLog "<td>${totalSpace}G</td><td>${freeSpace}G</td><td>${freePercent}%</td>"
      if [[ $rv -ne 0 ]]; then
        mailLog "<td>"
        errorLog "df failed with error code $rv while checking $disk" "inline"
        mailLog "</td>"
      else
        if [[ $freePercent -lt $DISK_SPACE_THRESHOLD ]]; then
          echo "$disk: $freeSpace GB ($freePercent%) free"
          mailLog "<td>"
          warningLog "$disk is running out of space" "inline"
          mailLog "</td>"
        else
          mailLog "<td>"
          okLog "$disk: $freeSpace GB ($freePercent%) free" "inline"
          mailLog "</td>"
        fi
      fi
    else
      mailLog "<td> - </td><td> - </td><td> - </td>"
      mailLog "<td>"
      errorLog "$disk is not mounted" "inline"
      mailLog "</td>"
      let error=error+1
    fi
    mailLog "</tr>"
  done
  mailLog "</table>"
  mailLog "<p>&nbsp;</p>"
  echo ""
  echo ""
}


# Check internet speed
function speed-test {
  local result rv
  local count=0
  local png dl ul
  local pngMin=9999
  local dlMax=0
  local ulMax=0
  echo "*** Internet Connection Speed ***"
  mailLog "<h2>Internet Connection Speed</h2>"
  mailLog "<table>"
  mailLog "<tr><th></th><th>Ping</th><th>Download</th><th>Upload</th></tr>"
  while [[ count -lt $SPEED_TEST_RUNS ]]; do
    let count=count+1
    result=$(/usr/local/bin/speedtest-cli --secure --simple 2>&1)
    rv=$?
    png=$(echo "$result" | grep "Ping" | cut -f2 -d" " | cut -f1 -d".")
    dl=$(echo "$result" | grep "Download" | cut -f2 -d" " | cut -f1 -d".")
    ul=$(echo "$result" | grep "Upload"   | cut -f2 -d" " | cut -f1 -d".")
    echo "* Run $count:"
    echo "$result"
    mailLog "<tr><th>Run $count:</th>"
    if [[ $rv -eq 0 ]]; then
      mailLog "<td>$png ms</td><td>$dl Mbit/s</td><td>$ul Mbit/s</td>"
    else
      mailLog "<td>"
      errorLog "speedtest-cli failed (exit code $rv)" "inline"
      mailLog "</td><td> - </td><td> - </td>"
    fi
    mailLog "</tr>"
    if [[ "$png" == "" ]];     then png=9999;    fi
    if [[ $png -lt $pngMin ]]; then pngMin=$png; fi
    if [[ $dl -gt $dlMax ]];   then dlMax=$dl;   fi
    if [[ $ul -gt $ulMax ]];   then ulMax=$ul;   fi
  done
  echo "* Best:"
  echo "Ping: $pngMin ms"
  echo "Download: $dlMax Mbit/s"
  echo "Upload: $ulMax Mbit/s"
  mailLog "<tr><th>Best:</th><td>$pngMin ms</td><td>$dlMax Mbit/s</td><td>$ulMax Mbit/s</td></tr>"
  mailLog "<tr><th>Status:</th><td>"
  if [[ $pngMin -gt $SPEED_TEST_PING_THRESHOLD ]]; then
    warningLog "Slow ping ($pngMin ms)" "inline"
  else
    okLog "OK" "inline"
  fi
  mailLog "</td><td>"
  if [[ $dlMax -lt $SPEED_TEST_DL_THRESHOLD ]]; then
    warningLog "Slow download speed ($dlMax Mbit/s)" "inline"
  else
    okLog "OK" "inline"
  fi
  mailLog "</td><td>"
  if [[ $ulMax -lt $SPEED_TEST_UL_THRESHOLD ]]; then
    warningLog "Slow upload speed ($ulMax Mbit/s)" "inline"
  else
    okLog "OK" "inline"
  fi
  mailLog "</td></tr></table>"
  mailLog "<p>&nbsp;</p>"
  echo ""
  echo ""
}


# Check errors from other scripts
function script-errors {
  local result
  echo "*** Error Messages ***"
  mailLog "<h2>Error Messages</h2>"
  if [[ -e "$CFG_ERROR_LOG" ]]; then
    result=`cat "$CFG_ERROR_LOG"`
    errorLog "The following errors occurred:"
    infoLog "(The following out-of-sequence timestamps are copied from other log files)"$'\n'"$result"
    mailLog "<pre>"
    mailLog "$result"
    mailLog "</pre>"
    SCRIPT_ERRORS=1
  else
    okLog "No error messages"
  fi
  mailLog "<p>&nbsp;</p>"
  echo ""
  echo ""
}


# Check warnings from other scripts
function script-warnings {
  local result
  echo "*** Warning Messages ***"
  mailLog "<h2>Warning Messages</h2>"
  if [[ -e "$CFG_WARNING_LOG" ]]; then
    result=`cat "$CFG_WARNING_LOG"`
    warningLog "The following warnings occurred:"
    infoLog "(The following out-of-sequence timestamps are copied from other log files)"$'\n'"$result"
    mailLog "<pre>"
    mailLog "$result"
    mailLog "</pre>"
    SCRIPT_WARNINGS=1
  else
    okLog "No warning messages"
  fi
  mailLog "<p>&nbsp;</p>"
  echo ""
  echo ""
}


# Check info messages from other scripts
function script-info {
  local result
  echo "*** Info Messages ***"
  mailLog "<h2>Info Messages</h2>"
  if [[ -e "$CFG_INFO_LOG" ]]; then
    result=`cat "$CFG_INFO_LOG"`
    echo "$result"
    mailLog "<pre>"
    mailLog "$result"
    mailLog "</pre>"
    SCRIPT_INFO=1
  else
    echo "No info messages"
    mailLog "<p><font class='unsure'>[?]</font> no info messages</p>"
  fi
  mailLog "<p>&nbsp;</p>"
  echo ""
  echo ""
}


# Check DNS connectivity
function dns {
  local result rv
  echo "*** DNS Test ***"
  mailLog "<h2>DNS Test</h2>"
  result=$(dig "$DOMAIN_NAME" @"$DNS" 2>&1)
  rv=$?
  if [[ $rv -ne 0 ]]; then
    errorLog "DNS resolver $DNS failed (exit code $rv)"
  else
    okLog "DNS resolver $DNS is good"
  fi
  echo "$result"
  mailLog "<pre>"
  mailLog "$result"
  mailLog "</pre>"
  mailLog "<p>&nbsp;</p>"
  echo ""
  echo ""
}


# Check IPv4 network connectivity
function ping-v4 {
  local result rv
  echo "*** IPv4 Ping ***"
  mailLog "<h2>IPv4 Ping</h2>"
  result=$(ping -c 4 "$DOMAIN_NAME" -4 2>&1)
  rv=$?
  if [[ $rv -ne 0 ]]; then
    errorLog "Ping $DOMAIN_NAME failed (exit code $rv)"
  else
    okLog "Ping is good"
  fi
  echo "$result"
  mailLog "<pre>"
  mailLog "$result"
  mailLog "</pre>"
  mailLog "<p>&nbsp;</p>"
  echo ""
  echo ""
}


# Check IPv6 network connectivity
function ping-v6 {
  local result rv
  if [[ "$DOMAIN_NAME_V6" == "" ]]; then
    return
  fi
  echo "*** IPv6 Ping ***"
  mailLog "<h2>IPv6 Ping</h2>"
  result=$(ping -c 4 "$DOMAIN_NAME_V6" -6 2>&1)
  rv=$?
  if [[ $rv -ne 0 ]]; then
    errorLog "Ping $DOMAIN_NAME_V6 failed (exit code $rv)"
  else
    okLog "Ping is good"
  fi
  echo "$result"
  mailLog "<pre>"
  mailLog "$result"
  mailLog "</pre>"
  mailLog "<p>&nbsp;</p>"
  echo ""
  echo ""
}


# Check the various service status
function service-status {
  local service status rv
  for service in "${SERVICES[@]}"; do
    status=$(/usr/sbin/service "$service" status 2>&1)
    rv=$?
    echo "*** '$service' Service Status ***"
    mailLog "<h2>'$service' Service Status</h2>"
    if [[ $rv -ne 0 ]]; then
      errorLog "Service '$service' failed:"
    else
      okLog "Service '$service' is running"
    fi
    echo "$status"
    mailLog "<pre>"
    mailLog "$status"
    mailLog "</pre>"
    mailLog "<p>&nbsp;</p>"
    echo ""
    echo ""
  done
}


# Check if the cron jobs are running
function cron-check {
  local i config prefix interval tmp log lastT t delta
  echo "*** Cron Job Status ***"
  mailLog "<h2>Cron Job Status</h2>"
  mailLog "<table>"
  mailLog "<tr><th>Job</th><th>Interval</th><th>Since</th><th>Status</th></tr>"
  t=$(date +%s)
  t=$((t / 86400))
  for i in "${!CFG_MONITOR_CRON[@]}"; do
    config=(${CFG_MONITOR_CRON[i]})
    prefix="${config[0]}"
    interval="${config[1]}"
    tmp="$CFG_TMP_DIR/monitor-cron-check-$prefix.tmp"
    for log in "$CFG_INFO_LOG" "$CFG_WARNING_LOG" "$CFG_ERROR_LOG"; do
      grep "\[$prefix\]" "$log" > /dev/null 2>&1
      if [[ $? -eq 0 ]]; then
        echo "$t" > "$tmp"
      fi
    done
    if [[ -f "$tmp" ]]; then
      lastT=$(cat "$tmp")
    else
      lastT=0
    fi
    delta=$((t-lastT))
    mailLog "<tr>"
    mailLog "<td>$prefix</td><td>$interval d.<td>$delta d.</td>"
    mailLog "<td>"
    if [[ $delta -gt $interval ]]; then
      warningLog "$prefix: Cron job took $delta (>$interval) days to execute" "inline"
    else
      okLog "$prefix: Last run since $delta d." "inline"
    fi
    mailLog "</td></tr>"
  done
  mailLog "</table>"
  mailLog "<p>&nbsp;</p>"
  echo ""
  echo ""
}




################
#### START  ####
################


# Check if the script is already running
semaphoreLock "$LOCK"
if [[ $? -ne 0 ]]; then
  warningLog "An instance of the current script is already running (please remove $LOCK)"
  exit 1
fi

# Pause all logging activities by locking the semaphore
logSemaphoreLock
if [[ $? -ne 0 ]]; then
  warningLog "Log semaphore locking timeout"
fi

# HTML header
mailLog "<!DOCTYPE html>"
mailLog "<?xml encoding=3D\"UTF-8\"??>"
mailLog "<html><head><style>"
mailLog "* {font-family: Arial, sans-serif;}"
mailLog "pre {font-size: 11px; font-family: Monaco, monospace;}"
mailLog "table {width: 350px;}"
mailLog "th {text-align: left; white-space: nowrap;}"
mailLog "td {text-align: left;}"
mailLog ".padded {padding-bottom: 10px;}"
mailLog "font.ok {font-weight: bold; color: green;}"
mailLog "font.warning {font-weight: bold; color: orange;}"
mailLog "font.error {font-weight: bold; color: red;}"
mailLog "font.unsure {font-weight: bold; color: gray;}"
mailLog "</style></head><body>"
echo ""

arg=$1
exitCode=0

# If no argument was given - execute all system tests
if [[ "$arg" == "" ]]; then
  for command in "${CFG_MONITOR_TEST[@]}"; do
    execute $command
  done
# Otherwise execute only the test defined by the argument
else
  execute $arg
  if [[ $? -ne 0 ]]; then
    exitCode=1
  fi
fi

# HTML closing tags
mailLog "</body></html>"


# Send email report
if [[ $exitCode -eq 0 ]]; then
  if [[ $ERROR_FLAG -ne 0 ]]; then
    sendMail "System ERROR"
    exitCode=$?
  elif [[ $WARNING_FLAG -ne 0 ]]; then
    sendMail "System WARNING"
    exitCode=$?
  else
    sendMail "System OK"
    exitCode=$?
  fi
fi


# Delete temporary log files
if [[ $exitCode -eq 0 ]]; then
  if [[ SCRIPT_ERRORS -eq 1 ]];   then rm -rf "$CFG_ERROR_LOG"  ; fi
  if [[ SCRIPT_WARNINGS -eq 1 ]]; then rm -rf "$CFG_WARNING_LOG"; fi
  if [[ SCRIPT_INFO -eq 1 ]];     then rm -rf "$CFG_INFO_LOG"   ; fi
fi

# Resume the logging activities
logSemaphoreRelease
if [[ $? -ne 0 ]]; then
  warningLog "Log semaphore was not locked"
fi

echo ""

# Release lock
semaphoreRelease "$LOCK"
exit $exitCode

